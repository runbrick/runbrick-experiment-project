services:
  experiment-mysql:
    image: mysql:8.4.2
    container_name: "experiment-mysql"
    #    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 123qwe
      TZ: Asia/Shanghai
    ports:
      - 53306:3306
    volumes:
      - ./mysql/data/:/var/lib/mysql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - experiment_network
    command:
      - --mysql-native-password=on
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_general_ci
      - --explicit_defaults_for_timestamp=true
      - --lower_case_table_names=1
      # 最大链接数
      - --max_connections=10000
      #      - --sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
      - --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
  # 定义 RabbitMQ 服务
  experiment-rabbitmq:
    # 使用你指定的镜像，包含管理插件
    image: rabbitmq:3-management
    # 为容器设置一个固定的、友好的名称
    container_name: my-rabbitmq
    # 设置 RabbitMQ 节点的主机名，这在集群中很有用
    hostname: rabbitmq
    # 设置环境变量，用于配置 RabbitMQ
    environment:
      # 设置默认的用户名和密码。请务必修改为更安全的值！
      # 默认的 guest/guest 用户只能从 localhost 访问。
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=123qwe
    ports:
      # 将主机的 5672 端口映射到容器的 5672 端口 (AMQP 协议，用于应用程序连接)
      - "45672:5672"
      # 将主机的 15672 端口映射到容器的 15672 端口 (Management UI 管理后台)
      - "55672:15672"
    volumes:
      # 创建一个名为 rabbitmq_data 的 Docker 卷，并挂载到容器中 RabbitMQ 存储数据的目录
      # 这样可以确保在容器重启或删除后，队列、消息和配置等数据不会丢失。
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      # 将此服务连接到下面定义的自定义网络
      - experiment_network
    # 设置重启策略，确保容器在意外退出或 Docker 服务重启后能自动重启
    restart: unless-stopped


# 定义 Docker 卷 (用于数据持久化)
volumes:
  rabbitmq_data:


# 定义自定义网络 (推荐做法，便于服务间通信)
networks:
  experiment_network:
    driver: bridge